openapi: "3.0.3"
info:
  title: "Okta | Auth0 Custom DB Example API"
  description: "# Introduction\n\nA key feature of Auth0 is to permit the Auth0 authorization server to proxy logins to external sources of users. This project is intended as an example of a custom DB connection into an Auth0. This page documents the RESTful API endpoints for that custom DB connection.\n\n## Source Code\n\nThis project is intended for use only as an example of how to connect Auth0 to an externally managed custom database. The <a href=\"https://github.com/WolbachAuth0/external-users-db\">source code</a> is available for Okta employees. It is not intended to represent production ready code.\n\n# Authentication\n\nThis API makes use of two types of authentication. The Basic Auth authentication scheme is used ONLY for the Login User endpoint. For all other endpoints, a bearer token (as a JWT) is appended in the authorization header."
  termsOfService: "undefined/terms"
  contact:
    name: "Aaron Wolbach"
    email: "aaron.wolbach@okta.com"
    url: "undefined/support"
  license:
    name: "UNLICENSED"
    url: "https://choosealicense.com/licenses/"
  version: "1.0"
  x-logo:
    url: "/public/okta-auth0-logo.svg"
    altText: "Okta | Auth0"
servers:
  - url: "undefined/api/v1"
    description: "Production server"
paths:
  /api/v1/users/login:
    get:
      summary: "Login User"
      description: "Attempts to log a user in. User credentials are extracted from the \n      Basic Auth Scheme. The base username (email) and password."
      security:
        - Basic_Auth:
            - "username"
            - "password"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  method:
                    type: "string"
                    description: "The HTTP method used in the request."
                  resource:
                    type: "string"
                    description: "The URL of the requested resource."
                  success:
                    type: "boolean"
                    description: "Was the request successful?"
                  status:
                    type: "integer"
                    description: "The HTTP status code"
                  statusText:
                    type: "string"
                    description: "A description of the http status code."
                  data:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/401"
  /api/v1/users/search:
    get:
      summary: "Search Users"
      description: "Find a list users which match the query parameters passed in the url"
      security:
        - Access_Token: []
      parameters:
        - $ref: "#/components/parameters/email"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  method:
                    type: "string"
                    description: "The HTTP method used in the request."
                  resource:
                    type: "string"
                    description: "The URL of the requested resource."
                  success:
                    type: "boolean"
                    description: "Was the request successful?"
                  status:
                    type: "integer"
                    description: "The HTTP status code"
                  statusText:
                    type: "string"
                    description: "A description of the http status code."
                  data:
                    $ref: "#/components/schemas/Paginated"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
  /api/v1/users/{id}:
    get:
      tags:
        - "Administration"
      summary: "Find User by ID"
      description: "Finds a User document that has the passed id."
      security:
        - Access_Token: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  method:
                    type: "string"
                    description: "The HTTP method used in the request."
                  resource:
                    type: "string"
                    description: "The URL of the requested resource."
                  success:
                    type: "boolean"
                    description: "Was the request successful?"
                  status:
                    type: "integer"
                    description: "The HTTP status code"
                  statusText:
                    type: "string"
                    description: "A description of the http status code."
                  data:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
    put:
      tags:
        - "Administration"
      summary: "Update User"
      description: "Describe the columns of the table with the passed table name."
      security:
        - Access_Token: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/UpdateUser"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  method:
                    type: "string"
                    description: "The HTTP method used in the request."
                  resource:
                    type: "string"
                    description: "The URL of the requested resource."
                  success:
                    type: "boolean"
                    description: "Was the request successful?"
                  status:
                    type: "integer"
                    description: "The HTTP status code"
                  statusText:
                    type: "string"
                    description: "A description of the http status code."
                  data:
                    $ref: "#/components/schemas/Paginated"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
    delete:
      summary: "Delete User"
      description: "Removes the single quote associated to the passed id from the database."
      security:
        - Access_Token: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  method:
                    type: "string"
                    description: "The HTTP method used in the request."
                  resource:
                    type: "string"
                    description: "The URL of the requested resource."
                  success:
                    type: "boolean"
                    description: "Was the request successful?"
                  status:
                    type: "integer"
                    description: "The HTTP status code"
                  statusText:
                    type: "string"
                    description: "A description of the http status code."
                  data:
                    $ref: "#/components/schemas/Paginated"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
  /api/v1/users/verify:
    put:
      summary: "Verify Email"
      description: "Verifies a user's email address."
      security:
        - Access_Token: []
      requestBody:
        $ref: "#/components/requestBodies/VerifyEmail"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  method:
                    type: "string"
                    description: "The HTTP method used in the request."
                  resource:
                    type: "string"
                    description: "The URL of the requested resource."
                  success:
                    type: "boolean"
                    description: "Was the request successful?"
                  status:
                    type: "integer"
                    description: "The HTTP status code"
                  statusText:
                    type: "string"
                    description: "A description of the http status code."
                  data:
                    $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
  /api/v1/users/change-password:
    put:
      summary: "Change Password"
      description: "Changes the password of the user associated to the email address in the request body."
      security:
        - Access_Token: []
      requestBody:
        $ref: "#/components/requestBodies/ChangePassword"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  method:
                    type: "string"
                    description: "The HTTP method used in the request."
                  resource:
                    type: "string"
                    description: "The URL of the requested resource."
                  success:
                    type: "boolean"
                    description: "Was the request successful?"
                  status:
                    type: "integer"
                    description: "The HTTP status code"
                  statusText:
                    type: "string"
                    description: "A description of the http status code."
                  data:
                    $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
  /api/v1/users/signup:
    post:
      summary: "Sign Up User"
      description: "Signs up a new user with the email and password provided in the request body."
      security:
        - Access_Token: []
      requestBody:
        $ref: "#/components/requestBodies/SignupUser"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  method:
                    type: "string"
                    description: "The HTTP method used in the request."
                  resource:
                    type: "string"
                    description: "The URL of the requested resource."
                  success:
                    type: "boolean"
                    description: "Was the request successful?"
                  status:
                    type: "integer"
                    description: "The HTTP status code"
                  statusText:
                    type: "string"
                    description: "A description of the http status code."
                  data:
                    $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
components:
  schemas:
    User:
      type: "object"
      description: "A User profile document"
      required:
        - "email"
        - "password"
      properties:
        id:
          type: "string"
          readOnly: true
          description: "The unique identifier of this document."
        email:
          type: "string"
          example: "abraham.lincoln@gmail.com"
          description: "The user's email address"
        verified:
          type: "boolean"
          example: false
          description: "Has the user verified his or her email address?"
        password:
          type: "string"
          writeOnly: true
          example: "MrPre$ident1861"
        profile:
          type: "object"
          description: "A collection of profile information on the user"
        createdAt:
          type: "string"
          readOnly: true
          description: "The date and time that this document was added to the database."
        updatedAt:
          type: "string"
          readOnly: true
          description: "The data and time that this document was last updated."
    VerifyEmail:
      type: "object"
      description: "A User profile document"
      required:
        - "email"
      properties:
        email:
          type: "string"
          writeOnly: true
          example: "abraham.lincoln@gmail.com"
          description: "The user's email address"
    ChangePassword:
      type: "object"
      description: "A User profile document"
      required:
        - "email"
        - "newPassword"
      properties:
        email:
          type: "string"
          writeOnly: true
          example: "abraham.lincoln@gmail.com"
          description: "The user's email address"
        newPassword:
          type: "string"
          writeOnly: true
          example: "MrPre$ident1861"
    Paginated:
      type: "object"
      description: ""
      properties:
        docs:
          type: "array"
          description: "List of documents matching the query."
          items:
            oneOf:
              - $ref: "#/components/schemas/User"
        totalDocs:
          type: "integer"
          description: ""
        limit:
          type: "integer"
          description: ""
        totalPages:
          type: "integer"
          description: ""
        page:
          type: "integer"
          description: ""
        pagingCounter:
          type: "integer"
          description: ""
        hasPrevPage:
          type: "boolean"
          description: ""
        hasNextPage:
          type: "boolean"
          description: ""
        prevPage:
          type:
            - "integer"
            - "null"
          description: ""
        nextPage:
          type:
            - "integer"
            - "null"
          description: ""
  parameters:
    id:
      name: "id"
      in: "path"
      required: true
      description: "Internal ID of the requested resource"
      schema:
        type: "string"
      example: "60b9533a479ac9a2804dca7b"
    populate:
      name: "populate"
      in: "query"
      required: false
      allowEmptyValue: true
      description: "Whether or not to populate sub-documents."
      schema:
        type: "string"
        enum:
          - "T"
          - "F"
        default: "F"
      example: "T"
    limit:
      name: "limit"
      in: "query"
      required: false
      allowEmptyValue: true
      description: "The maximum number of documents to return from the query."
      schema:
        type: "integer"
        minimum: 1
        maximum: 1000
        default: 50
      example: 25
    page:
      name: "page"
      in: "query"
      required: false
      allowEmptyValue: true
      description: "The page number to return fromt the query"
      schema:
        type: "integer"
        minimum: 1
      example: 2
    query:
      name: "q"
      in: "query"
      required: false
      allowEmptyValue: false
      description: "The query parameters you wish to pass"
      schema:
        type: "string"
      example: "verified=false"
    email:
      name: "email"
      in: "query"
      required: false
      allowEmptyValue: true
      description: "The email address to search for."
      schema:
        type: "string"
      example: "abraham.lincoln@potus.com"
  securitySchemes:
    Basic_Auth:
      type: "https"
      scheme: "basic"
      in: "header"
      name: "Authorization"
      description: "Provide username and password base 64 encoded in the Authorization header."
    Access_Token:
      type: "https"
      scheme: "bearer"
      bearerFormat: "JWT"
      in: "header"
      name: "Authorization"
      description: "Provide an access token in a JWT format. Access token should be generated an properly signed by the authoriztion server."
  requestBodies:
    LoginUser:
      description: "Updated quote data"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    ChangePassword:
      description: "Change Password"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ChangePassword"
    SignupUser:
      description: "Sign up a new user "
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    VerifyEmail:
      description: "Verify a user's email address"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/VerifyEmail"
    UpdateUser:
      description: "Update User Profile"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
  responses:
    200:
      description: "OK"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
    201:
      description: "CREATED"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
    204:
      description: "NO CONTENT"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
    304:
      description: "NOT MODIFIED"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
    400:
      description: "BAD REQUEST"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
    401:
      description: "UNAUTHORIZED"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
    403:
      description: "FORBIDDEN"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
    404:
      description: "NOT FOUND"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
    501:
      description: "NOT IMPLEMENTED"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                description: "The HTTP method used in the request."
              resource:
                type: "string"
                description: "The URL of the requested resource."
              success:
                type: "boolean"
                description: "Was the request successful?"
              status:
                type: "integer"
                description: "The HTTP status code"
              statusText:
                type: "string"
                description: "A description of the http status code."
              data:
                type: "object"
                description: "An object containing the successful response data."
